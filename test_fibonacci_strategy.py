#!/usr/bin/env python3
"""
Test script for the Fibonacci Strategy
"""

import sys
import os
import asyncio
import logging
from datetime import datetime

# Add the project root to the Python path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)

async def test_fibonacci_strategy():
    """Test the Fibonacci strategy initialization and basic functionality"""
    
    try:
        # Test 1: Import the strategy
        logger.info("Testing Fibonacci strategy import...")
        from strategy.fibonacci_strategy import FibonacciStrategy
        logger.info("‚úÖ Fibonacci strategy imported successfully")
        
        # Test 2: Create mock config
        mock_config = {
            'strategies': {
                'fibonacci': {
                    'enabled': True,
                    'parameters': {
                        'min_candles': 25,
                        'swing_lookback': 20,
                        'fib_tolerance': 0.005,
                        'trend_detection_period': 10,
                        'trend_slope_threshold': 0.001,
                        'exit_candles_required': 3,
                        'atr_period': 14,
                        'atr_multiplier_sl': 1.5,
                        'atr_multiplier_tp': 2.0,
                        'max_hold_time_hours': 24,
                        'risk_per_trade': 0.01,
                        'min_volume_threshold': 1.2,
                        'volume_lookback': 10
                    },
                    'target_timeframes': ['1h', '15m']
                }
            },
            'trading': {
                'min_order_size_usd': {
                    'binance': 5.0,
                    'bybit': 1.0,
                    'cryptocom': 12.0,
                    'default': 15.0
                }
            }
        }
        
        # Test 3: Create mock exchange and database
        class MockExchange:
            async def get_balance(self):
                return {'USDT': {'free': 1000.0}}
                
            async def get_ohlcv(self, pair, timeframe, limit=100):
                # Return mock OHLCV data
                import pandas as pd
                import numpy as np
                
                dates = pd.date_range(start='2024-01-01', periods=limit, freq='1H')
                np.random.seed(42)  # For reproducible results
                
                base_price = 50000
                prices = []
                for i in range(limit):
                    # Create some trending data with Fibonacci-like patterns
                    trend = 0.001 * i  # Upward trend
                    noise = np.random.normal(0, 0.002)
                    price = base_price * (1 + trend + noise)
                    prices.append(price)
                
                data = []
                for i, (date, price) in enumerate(zip(dates, prices)):
                    # Create OHLCV data
                    open_price = price
                    high_price = price * (1 + abs(np.random.normal(0, 0.005)))
                    low_price = price * (1 - abs(np.random.normal(0, 0.005)))
                    close_price = price * (1 + np.random.normal(0, 0.003))
                    volume = np.random.uniform(100, 1000)
                    
                    data.append({
                        'timestamp': date,
                        'open': open_price,
                        'high': high_price,
                        'low': low_price,
                        'close': close_price,
                        'volume': volume
                    })
                
                return pd.DataFrame(data)
        
        class MockDatabase:
            async def store_trade(self, trade_data):
                logger.info(f"Mock database stored trade: {trade_data}")
                return True
        
        # Test 4: Initialize the strategy
        logger.info("Testing Fibonacci strategy initialization...")
        exchange = MockExchange()
        database = MockDatabase()
        
        strategy = FibonacciStrategy(
            config=mock_config,
            exchange=exchange,
            database=database,
            exchange_name='binance'
        )
        logger.info("‚úÖ Fibonacci strategy initialized successfully")
        
        # Test 5: Initialize for a pair
        logger.info("Testing strategy initialization for pair...")
        await strategy.initialize('BTC/USDT')
        logger.info("‚úÖ Strategy initialized for BTC/USDT")
        
        # Test 6: Get mock market data and test signal generation
        logger.info("Testing signal generation...")
        ohlcv = await exchange.get_ohlcv('BTC/USDT', '1h', limit=100)
        
        # Update strategy with market data
        await strategy.update(ohlcv)
        
        # Generate signal
        signal, confidence, entry_price = await strategy.generate_signal(ohlcv, pair='BTC/USDT', timeframe='1h')
        
        logger.info(f"‚úÖ Signal generated: {signal}, confidence: {confidence:.3f}, entry_price: {entry_price}")
        
        # Test 7: Test Fibonacci levels calculation
        logger.info("Testing Fibonacci levels calculation...")
        fib_levels = strategy._calculate_fibonacci_levels(ohlcv)
        logger.info(f"‚úÖ Fibonacci levels calculated: {fib_levels}")
        
        # Test 8: Test trend detection
        logger.info("Testing trend detection...")
        uptrend = strategy._detect_uptrend(ohlcv)
        logger.info(f"‚úÖ Uptrend detected: {uptrend}")
        
        # Test 9: Test higher high detection
        logger.info("Testing higher high detection...")
        higher_high = strategy._detect_higher_high(ohlcv)
        logger.info(f"‚úÖ Higher high detected: {higher_high}")
        
        # Test 10: Test volume confirmation
        logger.info("Testing volume confirmation...")
        volume_confirmed = strategy._check_volume_confirmation(ohlcv)
        logger.info(f"‚úÖ Volume confirmed: {volume_confirmed}")
        
        # Test 11: Test ATR calculation
        logger.info("Testing ATR calculation...")
        atr = strategy._calculate_atr(ohlcv)
        logger.info(f"‚úÖ ATR calculated: {atr:.6f}")
        
        # Test 12: Test market regime detection
        logger.info("Testing market regime detection...")
        regime = strategy._detect_market_regime(ohlcv)
        logger.info(f"‚úÖ Market regime: {regime}")
        
        # Test 13: Test position size calculation
        logger.info("Testing position size calculation...")
        position_size = await strategy.calculate_position_size('buy')
        logger.info(f"‚úÖ Position size calculated: {position_size}")
        
        # Test 14: Test exit conditions
        logger.info("Testing exit conditions...")
        should_exit = await strategy.should_exit()
        logger.info(f"‚úÖ Should exit: {should_exit}")
        
        # Test 15: Test pair analysis
        logger.info("Testing pair analysis...")
        analysis_results = await strategy.analyze_pair('BTC/USDT', exchange_name='binance')
        logger.info(f"‚úÖ Pair analysis completed: {analysis_results}")
        
        logger.info("üéâ All Fibonacci strategy tests passed successfully!")
        
    except Exception as e:
        logger.error(f"‚ùå Test failed: {str(e)}")
        import traceback
        traceback.print_exc()
        return False
    
    return True

if __name__ == "__main__":
    # Run the test
    success = asyncio.run(test_fibonacci_strategy())
    
    if success:
        print("\nüéâ Fibonacci Strategy Integration Test PASSED!")
        print("The strategy has been successfully integrated into the trading bot.")
        print("\nKey Features Implemented:")
        print("‚úÖ Fibonacci retracement level calculation")
        print("‚úÖ Uptrend detection with lower-low to higher-high pattern")
        print("‚úÖ 0.5 Fibonacci level entry signals")
        print("‚úÖ Three consecutive bearish candles exit condition")
        print("‚úÖ Volume confirmation")
        print("‚úÖ ATR-based stop loss and take profit")
        print("‚úÖ Market regime detection")
        print("‚úÖ Position sizing based on risk management")
        print("‚úÖ Detailed entry and exit logging")
        print("\nThe strategy is now ready for use in both entry and exit cycles!")
    else:
        print("\n‚ùå Fibonacci Strategy Integration Test FAILED!")
        print("Please check the error messages above and fix any issues.")
        sys.exit(1)
