#!/usr/bin/env python3
"""
Complete Bybit Trading Cycle Test
Tests BUY order followed by SELL order to validate complete trading flow
WARNING: This will place REAL orders with real money!
"""

import asyncio
import httpx
import json
from datetime import datetime

# Test configuration
EXCHANGE_SERVICE_URL = "http://localhost:8003"
TEST_AMOUNT_USDC = 2.0  # $2 USDC for complete cycle test

async def test_complete_trading_cycle():
    """Test complete buy -> sell trading cycle"""
    print("üîÑ COMPLETE BYBIT TRADING CYCLE TEST")
    print("‚ö†Ô∏è  WARNING: This will place REAL BUY and SELL orders!")
    print(f"üí∞ Test amount: ${TEST_AMOUNT_USDC} USDC")
    print("=" * 60)
    
    # Get user confirmation
    print("üìã This test will:")
    print("   1Ô∏è‚É£ Buy BTC with USDC (market buy order)")
    print("   2Ô∏è‚É£ Wait for order to settle")
    print("   3Ô∏è‚É£ Sell the BTC back to USDC (market sell order)")
    print("   4Ô∏è‚É£ Verify complete cycle")
    print()
    confirmation = input("‚ö†Ô∏è  Continue with COMPLETE CYCLE test? Type 'YES' to proceed: ")
    if confirmation != 'YES':
        print("‚ùå Complete cycle test cancelled by user")
        return False
    
    async with httpx.AsyncClient(timeout=30.0) as client:
        try:
            # STEP 1: Get initial balances
            print("\nüìä STEP 1: Getting initial balances...")
            response = await client.get(f"{EXCHANGE_SERVICE_URL}/api/v1/account/balance/bybit")
            if response.status_code != 200:
                print(f"‚ùå Failed to get initial balance: {response.status_code}")
                return False
            
            initial_balance = response.json()
            initial_usdc = initial_balance.get('free', {}).get('USDC', 0) or 0
            initial_btc = initial_balance.get('free', {}).get('BTC', 0) or 0
            
            print(f"   üí∞ Initial USDC: {initial_usdc:.2f}")
            print(f"   ü™ô Initial BTC: {initial_btc:.8f}")
            
            if initial_usdc < TEST_AMOUNT_USDC:
                print(f"‚ùå Insufficient USDC: need ${TEST_AMOUNT_USDC}, have ${initial_usdc:.2f}")
                return False
            
            # STEP 2: Place BUY order
            print(f"\nüõí STEP 2: Placing BUY order...")
            buy_order = {
                "exchange": "bybit",
                "symbol": "BTC/USDC",
                "order_type": "market",
                "side": "buy",
                "amount": TEST_AMOUNT_USDC,
                "price": None
            }
            
            print(f"   üì§ Buying ${TEST_AMOUNT_USDC} worth of BTC...")
            buy_start = datetime.now()
            response = await client.post(f"{EXCHANGE_SERVICE_URL}/api/v1/trading/order", json=buy_order)
            buy_end = datetime.now()
            
            print(f"   ‚è±Ô∏è  Buy response time: {(buy_end - buy_start).total_seconds():.2f}s")
            print(f"   üìä Buy status: {response.status_code}")
            
            if response.status_code != 200:
                error_text = response.text
                print(f"   ‚ùå BUY ORDER FAILED!")
                print(f"   üìÑ Error: {error_text}")
                
                # Check if it's the Bybit parameter error
                if "createMarketBuyOrderRequiresPrice" in error_text:
                    print(f"   üö® BYBIT BUY PARAMETER ERROR - FIX NOT WORKING!")
                    return False
                else:
                    print(f"   ‚ùì Other buy error")
                    return False
            
            buy_result = response.json()
            print(f"   ‚úÖ BUY ORDER SUCCESSFUL!")
            print(f"   üìã Buy Order ID: {buy_result.get('id', 'N/A')}")
            
            # STEP 3: Wait and check balances after buy
            print(f"\n‚è≥ STEP 3: Waiting for buy order to settle...")
            await asyncio.sleep(3)  # Wait for order to process
            
            response = await client.get(f"{EXCHANGE_SERVICE_URL}/api/v1/account/balance/bybit")
            if response.status_code != 200:
                print(f"‚ùå Failed to get balance after buy")
                return False
            
            after_buy_balance = response.json()
            after_buy_usdc = after_buy_balance.get('free', {}).get('USDC', 0) or 0
            after_buy_btc = after_buy_balance.get('free', {}).get('BTC', 0) or 0
            
            usdc_spent = initial_usdc - after_buy_usdc
            btc_received = after_buy_btc - initial_btc
            
            print(f"   üí∞ USDC after buy: {after_buy_usdc:.2f} (spent: {usdc_spent:.2f})")
            print(f"   ü™ô BTC after buy: {after_buy_btc:.8f} (received: {btc_received:.8f})")
            
            if btc_received <= 0:
                print(f"   ‚ùå No BTC received from buy order!")
                return False
            
            print(f"   ‚úÖ Buy order completed successfully!")
            
            # STEP 4: Place SELL order
            print(f"\nüí∏ STEP 4: Placing SELL order...")
            
            # Sell the BTC we just bought (use slightly less to account for fees)
            btc_to_sell = btc_received * 0.99  # Use 99% to account for potential fees
            
            sell_order = {
                "exchange": "bybit",
                "symbol": "BTC/USDC",
                "order_type": "market", 
                "side": "sell",
                "amount": btc_to_sell,
                "price": None
            }
            
            print(f"   üì§ Selling {btc_to_sell:.8f} BTC...")
            sell_start = datetime.now()
            response = await client.post(f"{EXCHANGE_SERVICE_URL}/api/v1/trading/order", json=sell_order)
            sell_end = datetime.now()
            
            print(f"   ‚è±Ô∏è  Sell response time: {(sell_end - sell_start).total_seconds():.2f}s")
            print(f"   üìä Sell status: {response.status_code}")
            
            if response.status_code != 200:
                error_text = response.text
                print(f"   ‚ùå SELL ORDER FAILED!")
                print(f"   üìÑ Error: {error_text}")
                print(f"   ‚ö†Ô∏è  BTC is still in account: {after_buy_btc:.8f}")
                return False
            
            sell_result = response.json()
            print(f"   ‚úÖ SELL ORDER SUCCESSFUL!")
            print(f"   üìã Sell Order ID: {sell_result.get('id', 'N/A')}")
            
            # STEP 5: Check final balances
            print(f"\nüìä STEP 5: Checking final balances...")
            await asyncio.sleep(3)  # Wait for sell order to process
            
            response = await client.get(f"{EXCHANGE_SERVICE_URL}/api/v1/account/balance/bybit")
            if response.status_code != 200:
                print(f"‚ùå Failed to get final balance")
                return False
            
            final_balance = response.json()
            final_usdc = final_balance.get('free', {}).get('USDC', 0) or 0
            final_btc = final_balance.get('free', {}).get('BTC', 0) or 0
            
            # Calculate complete cycle results
            total_usdc_change = final_usdc - initial_usdc
            total_btc_change = final_btc - initial_btc
            
            print(f"   üí∞ Final USDC: {final_usdc:.2f}")
            print(f"   ü™ô Final BTC: {final_btc:.8f}")
            print()
            print(f"üìä COMPLETE CYCLE RESULTS:")
            print(f"   üíµ USDC change: {total_usdc_change:+.2f} (fees & slippage)")
            print(f"   ü™ô BTC change: {total_btc_change:+.8f}")
            print()
            
            # Analyze results
            if abs(total_btc_change) < 0.00001:  # Minimal BTC change (good)
                print(f"   ‚úÖ BTC balance restored (minimal residual)")
            else:
                print(f"   ‚ö†Ô∏è  BTC balance change: {total_btc_change:.8f}")
            
            if total_usdc_change > -1.0:  # Less than $1 lost to fees
                print(f"   ‚úÖ USDC loss reasonable (trading fees & slippage)")
            else:
                print(f"   ‚ö†Ô∏è  Large USDC loss: ${abs(total_usdc_change):.2f}")
            
            # Success criteria
            buy_success = buy_result.get('id') is not None
            sell_success = sell_result.get('id') is not None
            cycle_complete = abs(total_btc_change) < 0.0001  # Very small BTC remainder
            
            if buy_success and sell_success and cycle_complete:
                print(f"\nüéâ COMPLETE TRADING CYCLE SUCCESSFUL!")
                print(f"   ‚úÖ Buy order: {buy_result.get('id')}")
                print(f"   ‚úÖ Sell order: {sell_result.get('id')}")
                print(f"   ‚úÖ Cycle completed with expected fees")
                return True
            else:
                print(f"\n‚ö†Ô∏è  Partial success:")
                print(f"   Buy: {'‚úÖ' if buy_success else '‚ùå'}")
                print(f"   Sell: {'‚úÖ' if sell_success else '‚ùå'}")
                print(f"   Cycle: {'‚úÖ' if cycle_complete else '‚ùå'}")
                return False
                
        except Exception as e:
            print(f"‚ùå Complete cycle test failed with exception: {e}")
            return False

async def main():
    """Run the complete trading cycle test"""
    print(f"üß™ Bybit Complete Trading Cycle Test")
    print(f"‚è∞ Started at: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    success = await test_complete_trading_cycle()
    
    print("\n" + "=" * 60)
    if success:
        print("üéâ COMPLETE TRADING CYCLE TEST PASSED!")
        print("‚úÖ Both buy and sell orders work correctly")
        print("‚úÖ Bybit buy parameter fix is working")
        print("‚úÖ Complete trading flow validated")
        print("üöÄ System ready for production trading")
    else:
        print("‚ùå COMPLETE TRADING CYCLE TEST FAILED!")
        print("üîß Issues detected in the trading flow")
        print("üìã Check the detailed logs above")
    
    print(f"‚è∞ Completed at: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

if __name__ == "__main__":
    asyncio.run(main())